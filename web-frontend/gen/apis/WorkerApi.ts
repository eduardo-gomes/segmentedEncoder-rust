/* tslint:disable */
/* eslint-disable */
/**
 * SegmentedEncoder rest api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.3
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Task,
  TaskRequest,
  TaskStatus,
} from '../models/index';
import {
    TaskFromJSON,
    TaskToJSON,
    TaskRequestFromJSON,
    TaskRequestToJSON,
    TaskStatusFromJSON,
    TaskStatusToJSON,
} from '../models/index';

export interface JobJobIdTaskPostRequest {
    jobId: string;
    taskRequest?: TaskRequest;
}

export interface JobJobIdTaskTaskIdInputNumGetRequest {
    num: number;
    jobId: string;
    taskId: string;
}

export interface JobJobIdTaskTaskIdOutputGetRequest {
    jobId: string;
    taskId: string;
}

export interface JobJobIdTaskTaskIdOutputPutRequest {
    jobId: string;
    taskId: string;
    body?: Blob;
}

export interface JobJobIdTaskTaskIdStatusPostRequest {
    jobId: string;
    taskId: string;
    taskStatus?: TaskStatus;
}

/**
 * 
 */
export class WorkerApi extends runtime.BaseAPI {

    /**
     * allocate a task to current worker
     */
    async allocateTaskGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Task>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // auth_token authentication
        }

        const response = await this.request({
            path: `/allocate_task`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TaskFromJSON(jsonValue));
    }

    /**
     * allocate a task to current worker
     */
    async allocateTaskGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Task> {
        const response = await this.allocateTaskGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Append task to job
     */
    async jobJobIdTaskPostRaw(requestParameters: JobJobIdTaskPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling jobJobIdTaskPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // auth_token authentication
        }

        const response = await this.request({
            path: `/job/{job_id}/task`.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaskRequestToJSON(requestParameters['taskRequest']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Append task to job
     */
    async jobJobIdTaskPost(requestParameters: JobJobIdTaskPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.jobJobIdTaskPostRaw(requestParameters, initOverrides);
    }

    /**
     */
    async jobJobIdTaskTaskIdInputNumGetRaw(requestParameters: JobJobIdTaskTaskIdInputNumGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['num'] == null) {
            throw new runtime.RequiredError(
                'num',
                'Required parameter "num" was null or undefined when calling jobJobIdTaskTaskIdInputNumGet().'
            );
        }

        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling jobJobIdTaskTaskIdInputNumGet().'
            );
        }

        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling jobJobIdTaskTaskIdInputNumGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // auth_token authentication
        }

        const response = await this.request({
            path: `/job/{job_id}/task/{task_id}/input/{num}`.replace(`{${"num"}}`, encodeURIComponent(String(requestParameters['num']))).replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId']))).replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async jobJobIdTaskTaskIdInputNumGet(requestParameters: JobJobIdTaskTaskIdInputNumGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.jobJobIdTaskTaskIdInputNumGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async jobJobIdTaskTaskIdOutputGetRaw(requestParameters: JobJobIdTaskTaskIdOutputGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling jobJobIdTaskTaskIdOutputGet().'
            );
        }

        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling jobJobIdTaskTaskIdOutputGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // auth_token authentication
        }

        const response = await this.request({
            path: `/job/{job_id}/task/{task_id}/output`.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId']))).replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async jobJobIdTaskTaskIdOutputGet(requestParameters: JobJobIdTaskTaskIdOutputGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.jobJobIdTaskTaskIdOutputGetRaw(requestParameters, initOverrides);
    }

    /**
     */
    async jobJobIdTaskTaskIdOutputPutRaw(requestParameters: JobJobIdTaskTaskIdOutputPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling jobJobIdTaskTaskIdOutputPut().'
            );
        }

        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling jobJobIdTaskTaskIdOutputPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'video/x-matroska';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // auth_token authentication
        }

        const response = await this.request({
            path: `/job/{job_id}/task/{task_id}/output`.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId']))).replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async jobJobIdTaskTaskIdOutputPut(requestParameters: JobJobIdTaskTaskIdOutputPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.jobJobIdTaskTaskIdOutputPutRaw(requestParameters, initOverrides);
    }

    /**
     * Update task status
     */
    async jobJobIdTaskTaskIdStatusPostRaw(requestParameters: JobJobIdTaskTaskIdStatusPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling jobJobIdTaskTaskIdStatusPost().'
            );
        }

        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling jobJobIdTaskTaskIdStatusPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // auth_token authentication
        }

        const response = await this.request({
            path: `/job/{job_id}/task/{task_id}/status`.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId']))).replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TaskStatusToJSON(requestParameters['taskStatus']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update task status
     */
    async jobJobIdTaskTaskIdStatusPost(requestParameters: JobJobIdTaskTaskIdStatusPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.jobJobIdTaskTaskIdStatusPostRaw(requestParameters, initOverrides);
    }

}
