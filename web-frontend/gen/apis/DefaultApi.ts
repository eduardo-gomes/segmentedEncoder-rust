/* tslint:disable */
/* eslint-disable */
/**
 * SegmentedEncoder rest api
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';

export interface JobJobIdDeleteRequest {
    jobId: string;
}

export interface JobJobIdInfoGetRequest {
    jobId: string;
}

export interface JobJobIdOutputGetRequest {
    jobId: string;
}

export interface JobJobIdTaskTaskIdDeleteRequest {
    jobId: string;
    taskId: string;
}

export interface JobPostRequest {
    videoCodec: string;
    body: Blob;
    videoParam?: Array<string>;
    audioCodec?: string;
    audioParam?: Array<string>;
    segmentDuration?: number;
}

export interface LoginGetRequest {
    credentials: string;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * Delete this job and its tasks
     */
    async jobJobIdDeleteRaw(requestParameters: JobJobIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling jobJobIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // auth_token authentication
        }

        const response = await this.request({
            path: `/job/{job_id}`.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete this job and its tasks
     */
    async jobJobIdDelete(requestParameters: JobJobIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.jobJobIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get job info, as well as each task progress
     */
    async jobJobIdInfoGetRaw(requestParameters: JobJobIdInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling jobJobIdInfoGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // auth_token authentication
        }

        const response = await this.request({
            path: `/job/{job_id}/info`.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get job info, as well as each task progress
     */
    async jobJobIdInfoGet(requestParameters: JobJobIdInfoGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.jobJobIdInfoGetRaw(requestParameters, initOverrides);
    }

    /**
     * Get the job output (output of the last task)
     */
    async jobJobIdOutputGetRaw(requestParameters: JobJobIdOutputGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling jobJobIdOutputGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // auth_token authentication
        }

        const response = await this.request({
            path: `/job/{job_id}/output`.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get the job output (output of the last task)
     */
    async jobJobIdOutputGet(requestParameters: JobJobIdOutputGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.jobJobIdOutputGetRaw(requestParameters, initOverrides);
    }

    /**
     * Abort task instance. Will rerun
     */
    async jobJobIdTaskTaskIdDeleteRaw(requestParameters: JobJobIdTaskTaskIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling jobJobIdTaskTaskIdDelete().'
            );
        }

        if (requestParameters['taskId'] == null) {
            throw new runtime.RequiredError(
                'taskId',
                'Required parameter "taskId" was null or undefined when calling jobJobIdTaskTaskIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // auth_token authentication
        }

        const response = await this.request({
            path: `/job/{job_id}/task/{task_id}`.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId']))).replace(`{${"task_id"}}`, encodeURIComponent(String(requestParameters['taskId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Abort task instance. Will rerun
     */
    async jobJobIdTaskTaskIdDelete(requestParameters: JobJobIdTaskTaskIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.jobJobIdTaskTaskIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Create new job
     */
    async jobPostRaw(requestParameters: JobPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['videoCodec'] == null) {
            throw new runtime.RequiredError(
                'videoCodec',
                'Required parameter "videoCodec" was null or undefined when calling jobPost().'
            );
        }

        if (requestParameters['body'] == null) {
            throw new runtime.RequiredError(
                'body',
                'Required parameter "body" was null or undefined when calling jobPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'video/*';

        if (requestParameters['videoCodec'] != null) {
            headerParameters['video_codec'] = String(requestParameters['videoCodec']);
        }

        if (requestParameters['videoParam'] != null) {
            headerParameters['video_param'] = requestParameters['videoParam']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['audioCodec'] != null) {
            headerParameters['audio_codec'] = String(requestParameters['audioCodec']);
        }

        if (requestParameters['audioParam'] != null) {
            headerParameters['audio_param'] = requestParameters['audioParam']!.join(runtime.COLLECTION_FORMATS["csv"]);
        }

        if (requestParameters['segmentDuration'] != null) {
            headerParameters['segment_duration'] = String(requestParameters['segmentDuration']);
        }

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // auth_token authentication
        }

        const response = await this.request({
            path: `/job`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Create new job
     */
    async jobPost(requestParameters: JobPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.jobPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async loginGetRaw(requestParameters: LoginGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['credentials'] == null) {
            throw new runtime.RequiredError(
                'credentials',
                'Required parameter "credentials" was null or undefined when calling loginGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['credentials'] != null) {
            headerParameters['credentials'] = String(requestParameters['credentials']);
        }

        const response = await this.request({
            path: `/login`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async loginGet(requestParameters: LoginGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.loginGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async versionGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/version`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async versionGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.versionGetRaw(initOverrides);
        return await response.value();
    }

}
