name: Rust

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: download protoc windows
      working-directory: ${{ env.RUNNER_TEMP }}
      if: runner.os == 'Windows'
      run: |
        Invoke-WebRequest https://github.com/protocolbuffers/protobuf/releases/download/v21.8/protoc-21.8-win64.zip -OutFile protoc.zip
        Expand-Archive protoc.zip -DestinationPath protoc
        echo ("PROTOC=" + (Get-Location).ToString() + "\protoc\bin\protoc.exe") >> $env:GITHUB_ENV
    - name: download protoc linux
      if: runner.os == 'Linux'
      run: sudo apt-get update -yqq && sudo apt-get install -yqq protobuf-compiler
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: stable
    - name: Cache build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-build-debug
    - name: Build
      run: cargo build --verbose
    - name: Run tests
      run: cargo test --verbose

  build-release:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: download protoc windows
      working-directory: ${{ env.RUNNER_TEMP }}
      if: runner.os == 'Windows'
      run: |
        Invoke-WebRequest https://github.com/protocolbuffers/protobuf/releases/download/v21.8/protoc-21.8-win64.zip -OutFile protoc.zip
        Expand-Archive protoc.zip -DestinationPath protoc
        echo ((Get-Location).ToString() + "\protoc\bin\") >> $env:GITHUB_PATH
        echo (${{ env.RUNNER_TEMP }} + "\protoc\bin\")
        echo ((Get-Location).ToString() + "\protoc\bin\")
    - name: download protoc linux
      if: runner.os == 'Linux'
      run: sudo apt-get update -yqq && sudo apt-get install -yqq protobuf-compiler
    - uses: actions/checkout@v3
    - uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
    - name: Cache build
      uses: actions/cache@v3
      with:
        path: target
        key: ${{ runner.os }}-build-optimized
    - name: Build
      run: cargo +nightly build --profile=release-lto --bins -Z unstable-options --out-dir binaries --verbose
    - name: Upload Artifact
      uses: actions/upload-artifact@v3
      with:
        name: build optimized
        path: binaries
        retention-days: 30
